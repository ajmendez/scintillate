#!/usr/bin/env python
import os
import sys
import calendar
import requests
import cookielib
import scintillate
from pprint import pprint
from bs4 import BeautifulSoup
from pymendez.auth import auth
from datetime import datetime, timedelta


APPID = auth('flickr','appid')
URL = 'https://www.flickr.com/services/apps/%s/key'%APPID
COOKIES = os.path.expanduser('~/.limited/cookies.txt')

def getsoup():
    cj = cookielib.MozillaCookieJar(COOKIES)
    cj.load()
    response = requests.get(URL, cookies=cj)
    return BeautifulSoup(response.text)

def getoffset(k, timescale):
    '''calculates the offset, soffset limits collisions'''
    if 'hour' in timescale:
        soffset = 0
        hours = k*1.0
    elif 'day' in timescale:
        soffset = 1
        hours = k*24.0
    elif 'week' in timescale:
        soffset = 2
        hours = k*24.0*7.0
    return timedelta(hours=hours, seconds=-soffset)

def formatdate(dt):
    return calendar.timegm(dt.timetuple())

def parsesoup(soup, date=None):
    # generalize to each hour
    if date is None:
        date = datetime.utcnow().replace(minute=0, second=0, microsecond=0)
    
    out = {}
    for table in soup.findAll('table'):
        if not table.get('id'):
            for k,bar in enumerate(table.findAll('div',{'class':'statlabel'})):
                tmp = bar.text.split('QPS')
                tmp2 = tmp[1].replace(',','').split()
                qps = float(tmp[0])
                calls = int(tmp2[0])
                timescale = tmp2[-1]
                # print qps, calls, timescale
                d = formatdate(date - getoffset(k, timescale))
                out[d] = dict(
                    date = d,
                    qps = qps,
                    calls = calls,
                    timescale=timescale,
                )
    return out
            

def main():
    with scintillate.Data(scintillate.APISTATS_FILENAME, dict) as data:
        try:
            soup = getsoup()
            out = parsesoup(soup)
            data.update(out)
        except KeyboardInterrupt as e:
            print 'Bye!'
        
        except IOError as e:
            print 'API Issue? : {}'.format(e)


if __name__ == '__main__':
    from pysurvey import util
    util.setup_stop()
    
    main()